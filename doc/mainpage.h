/*! 

\mainpage Пример простой игры на С++, с использованием SFML

\tableofcontents

\section abs О проекте
Проект выступает в роли тренировочной площадки в практике использования яыка С++.

Программа является реконструкцией классической игры Battle City (или Танк 1990).
[Описание игры Battle City](https://habrahabr.ru/post/142126/).

Основная цель проекта состоит в том, чтобы опробовать на практике подход
к проектированию игр, который описывается в книге [SFML Game Development](https://www.packtpub.com/game-development/sfml-game-development).

\section vs Использование решения Visual Studio 2017 

В качестве библиотеки мультимедиа используется [SFML](https://www.sfml-dev.org/index.php).
Репозиторий [на GitHub](https://github.com/kozubv/BattleCity) 
содержит необходимые библиотеки для запуска решения BattleCity.sln в Visual Studio 2017 

Ствойства проекта VS настроены на кофигурацию _Debug_ на платформе _Win32_

При открытии проекта в Visual Studio 2017 обратите внимание 
на значение "Версия пакета SDK для Windows" в Проект->Свойства->Общие


\section abs2 Возможности программы
- управление персонажем с клавиатуры
- танкам можно назначить собственную стратегию автономного поведения
- загрузка карт уровней и свойств персонажей из файлов
- анимации настраиваются из файла
- и т.п.

\section Структура

\subsection basis_classes Базовые элементы управления

Классы, отвечающие за общую структуру программы в которую входит:
 - инициализация графического окна Game, Window.
 - обработка пользовательского управления EventManager.
 - переключение режимов игры StateManager, BaseState, SharedContext.
 - реализация конкретных режимов:
    - главное меню State_TanksMenu
    - выбор карты State_LevelSelection
    - битва State_Battle
    - статистика битвы State_BattleReport.
\image html for_doxygen_page.gif
\see SGML_Game_Book
    
    
\subsection visualisation Визуализация

Классы, отвечающие за графическое отображение:
 - централизованное управление ресурсами SpriteManager, TextureManager
 - панели визуальноего отображения информации SpriteTable, CharDisplay
 - анимирование и визуальные эффекты AnimBase, AnimList
 
\see Visualisation


\subsection units_and_map Юниты и карта
Классы этой группы:

Формируют общий интерфейс, правила создания и хранения игровых сущностей 
(EntityBase, Factiory)

Определяют конкретные игровые сущности: 
 - Танк Tank
 - Снаряд Bullet
 - Бонус Bonus
 - Препятствия Barrier
 
Определяют правила взаимодействий игровых сущностей при контакте EntityInteraction

Возможно, наиболее интересная возможность:
 - стратегия автономного поведения для таков TankDriverBase, TankDriver
 
\see battle_city_game_classes


\subsection interaction Отслеживание взаимодействий

Кроме описания поведения и правил взаимодействий юнитов, необходим контроль их состояний
в результате следования заданным правилам. А также очистка хранилища сущностей, 
после их уничтожения.
Для этого введен класс EntityManager и \ref interaction_processing_algorithms


\subsection scenario Сценарий игры

Что бы собрать все юниты вместе и подчинить желаемому сценарию ход битвы
используются классы BattleCity и GameScenario.

## Расширение возможностей
На данные момент в программе реализованы все элементы, необходимые для полноценного игрового режима.
Имеющиеся расхождения с оригиналом в сценарии и взаимодействиях юнитов 
на мой взгляд, могу быть легко устранены при необходимости.


*/













