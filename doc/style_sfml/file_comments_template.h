#include <>
#include <>

/// \brief 	<> шаблон комментирования класса 		
/// \details	<>
/// \pre		<> предварительные действия, необходимые для использования экземпляра класса
/// \warning	<> предпреждения о случаях некорректной работы
/// \note		<> описание дазайна, его проблем и способов его улучшения
/// \bug		<> обнаруженные глюки
/// \see  		<> ссылки на связанные элементы
class MyClass {
 public:
  MyClass();
  
  /// \brief Коротенькое описание метода
  /// \param[in,out]	name описание wa
  /// \param[in]		name описание
  /// \param[out]		name описание
  /// \param x,y,x <>	общее описание
  /// \exception  	[] генерируемое исключение или вызов terminate()
  /// \see 			<> ссылки на связанные элементы
  std::vector Function(int a, const std::string, ///< вертикальное выравнивание
                                                  ///< параметров вызова по левой скобке
					   std::unique_ptr<std::vector<int>> ); 

 protected:
	void setPosition() const;					///< крайне короткие функции 
                                                ///< можно комментить как члены данные
 private:
  int 								a_;			///< члены данные комментятся справа
  std::pair<int, std::string>		pair_i_s_;  ///< и выравниваются по вертикали
  
  /// для случая вот таких вот длинных типов перменных 
  /// надо использовани объявления using T = std::lol; где-то ранее
  sts::unordered_map<std::string,std::unique_ptr<std::vector<int>>> map_;
  
  /// вот так:
  /// описание - для чего используется тип.
  using Mytype = sts::unordered_map<std::string, std::unique_ptr<std::vector<int>>> map_;
  MyType                            data_;		///< описанике как всегда
};


/// \brief шаблон комментирования класса
/// \details	
/// \pre		предварительные условия для использования класса
/// \note		замечания [нет большой пользы]
/// \warning	предпреждения о случаях некорректной работы
/// \bug		обнаруженные глюки
class MyClass {
...
};



/** \page PageName описание взаимного использования элементов, определенных в файле.
	
	Подобная RelatedPage создается в текущем заголовочном файле, если все его определения могут быть 
	использованы без привлечения дополнительных заголовков.
	
	Такой подход позволит оспользовать описание к заголовку в других проектах.
	
	Для описания взаимного использования элементов, определенных в разных заголовках,
	следует создавать отдельный файл документации (.h - например) и разместить
	его в папке doc текущего проекта. 
	
	На основании имеющихся \\page будет собрана \\mainpage со ссылками на оные.  

**/








